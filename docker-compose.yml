# ============================================================================
# Docker Compose - Configuration complÃ¨te Frontend + Backend
# ============================================================================

services:
  # ========== BACKEND (Django + Gunicorn) ==========
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
      target: web
    restart: unless-stopped
    volumes:
      - media_data:/app/media
      - static_data:/app/statics
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - app-network

  # ========== FRONTEND (Nuxt 3) ==========
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - app-network

  # ========== NGINX (Reverse Proxy) ==========
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - media_data:/var/www/media:ro
      - static_data:/var/www/static:ro
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

  # ========== REDIS ==========
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory ${REDIS_MAXMEMORY:-256mb}
      --maxmemory-policy allkeys-lru
    networks:
      - app-network

  # ========== POSTGRESQL ==========
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # ========== CELERY WORKER ==========
  celery-worker:
    build:
      context: ./back
      dockerfile: Dockerfile.celery
    restart: unless-stopped
    command: celery -A EuropGreenSolar worker -l info --concurrency=${CELERY_CONCURRENCY:-4}
    volumes:
      - media_data:/app/media
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - app-network

  # ========== CELERY BEAT ==========
  celery-beat:
    build:
      context: ./back
      dockerfile: Dockerfile.celery
    restart: unless-stopped
    command: celery -A EuropGreenSolar beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - media_data:/app/media
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - app-network

# ========== VOLUMES ==========
volumes:
  postgres_data:
  redis_data:
  media_data:
  static_data:

# ========== NETWORKS ==========
networks:
  app-network:
    driver: bridge
