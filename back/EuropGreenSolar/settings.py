"""
Django settings for EuropGreenSolar project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-h#4*tb(@c3yel34p=)blpxh7b$s=u9ulev@i%pq^n+85jh^&es'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=lambda v: [host.strip() for host in v.split(',')])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Application tierces
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    'auditlog',  # django-auditlog
    'django_celery_beat',  # Celery Beat pour tâches planifiées
    
    'authentication',
    'users',
    'request',
    'offers',
    'billing',
    'installations',
    'invoices',
    'administrative',
    'planning',
    'admin_platform',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'authentication.auditlog_middleware.AuditlogActorMiddleware',  # CUSTOM: définit l'actor pour auditlog
    'auditlog.middleware.AuditlogMiddleware',  # django-auditlog (APRÈS AuditlogActorMiddleware)
]

ROOT_URLCONF = 'EuropGreenSolar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'EuropGreenSolar.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3' if DEBUG else 'django.db.backends.postgresql',
        'NAME': BASE_DIR / 'db.sqlite3' if DEBUG else config('DB_NAME'),
        'USER': '' if DEBUG else config('DB_USER'),
        'PASSWORD': '' if DEBUG else config('DB_PASSWORD'),
        'HOST': '' if DEBUG else config('DB_HOST', default='localhost'),
        'PORT': '' if DEBUG else config('DB_PORT', default='5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'fr-fr'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True

FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/statics/'
STATICFILES_DIRS = [BASE_DIR / 'static']  # Répertoire où tu mets tes fichiers statiques en dev
STATIC_ROOT = BASE_DIR / 'statics'  # Répertoire dans lequel collectstatic mettra tout en prod

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = "users.User"

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=10),
    'REFRESH_TOKEN_LIFETIME': timedelta(weeks=10),
    'ROTATE_REFRESH_TOKENS': True,
}

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    FRONTEND_URL,
]

SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SECURE = False if DEBUG else True  # True en prod

CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SECURE = False if DEBUG else True  # True en prod

# JWT Token Cookies Configuration
ACCESS_TOKEN_COOKIE_NAME = 'access_token'
REFRESH_TOKEN_COOKIE_NAME = 'refresh_token'
TOKEN_COOKIE_HTTPONLY = True
TOKEN_COOKIE_SAMESITE = 'Lax'
TOKEN_COOKIE_SECURE = False if DEBUG else True  # True en prod

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'authentication.auth_method.CookieJWTAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'EUROP\'GREEN SOLAR API',
    'DESCRIPTION': "Logiciel de gestion des projets d'installation solaire visant à optimiser et à centraliser la gestion des différentes étapes d'un projet d'installation solaire, depuis la visite technique initiale jusqu'à la mise en service, en passant par les démarches administratives et le suivi client",
    'VERSION': '0.1.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
}

# SMTP CONFIG

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' if config('EMAIL_HOST_PASSWORD', default='') else 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST', default='')
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='')
SAV_EMAIL = config('SAV_EMAIL', default='')
CAREER_EMAIL = config('CAREER_EMAIL', default='')

# Mailgun Configuration
MAILGUN_API_KEY = config('MAILGUN_API_KEY', default='')
MAILGUN_DOMAIN = config('MAILGUN_DOMAIN', default='')

# ============================================================================
# Celery Configuration
# ============================================================================

from urllib.parse import quote_plus

# Mot de passe Redis pour sécurité
REDIS_PASSWORD = config('REDIS_PASSWORD', default='changeme_redis_password')

# Construction de l'URL Redis avec authentification
REDIS_HOST = config('REDIS_HOST', default='redis')
REDIS_PORT = config('REDIS_PORT', default='6379')
REDIS_DB = config('REDIS_DB', default='0')

# ⚠️ IMPORTANT: URL-encoder le mot de passe pour échapper les caractères spéciaux (@, :, etc.)
REDIS_PASSWORD_ENCODED = quote_plus(REDIS_PASSWORD)

# Format: redis://:password@host:port/db
CELERY_BROKER_URL = f'redis://:{REDIS_PASSWORD_ENCODED}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}'
CELERY_RESULT_BACKEND = f'redis://:{REDIS_PASSWORD_ENCODED}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}'

# Sérialisation JSON pour plus de sécurité
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Fuseau horaire (doit correspondre à TIME_ZONE)
CELERY_TIMEZONE = 'Europe/Paris'
CELERY_ENABLE_UTC = False

# Configuration pour Celery Beat (tâches planifiées)
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Timeout et retry policy
CELERY_TASK_TIME_LIMIT = 300  # 5 minutes max par tâche
CELERY_TASK_SOFT_TIME_LIMIT = 270  # Avertissement à 4m30
CELERY_TASK_ACKS_LATE = True  # Confirmer seulement après exécution
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # Une tâche à la fois par worker

# ============================================================================
# Système de Rappels de Tâches - Configuration
# ============================================================================

# Nombre de jours avant l'échéance pour le rappel (défaut: 3 jours)
REMINDER_DAYS_BEFORE = config('REMINDER_DAYS_BEFORE', default=3, cast=int)

# Nombre d'heures avant l'échéance pour le rappel urgent (défaut: 3 heures)
REMINDER_HOURS_BEFORE = config('REMINDER_HOURS_BEFORE', default=3, cast=int)

# Heure par défaut pour les rappels quotidiens et tâches sans heure (défaut: 08h00)
REMINDER_TIME_HOUR = config('REMINDER_TIME_HOUR', default=8, cast=int)


