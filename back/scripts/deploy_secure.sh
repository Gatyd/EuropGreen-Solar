#!/bin/bash

# Script de d√©ploiement s√©curis√© avec corrections Redis
# Usage: ./deploy_secure.sh

set -e  # Arr√™t en cas d'erreur

echo "================================================"
echo "üîí D√©ploiement s√©curis√© - EuropGreen-Solar"
echo "================================================"
echo ""

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# V√©rifier si on est dans le bon r√©pertoire
if [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}‚ùå Erreur: docker-compose.yml non trouv√©${NC}"
    echo "Ex√©cutez ce script depuis le r√©pertoire back/"
    exit 1
fi

# V√©rifier si .env existe
if [ ! -f ".env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Fichier .env non trouv√©${NC}"
    echo "Cr√©ation depuis .env.example..."
    cp .env.example .env
    echo -e "${GREEN}‚úÖ Fichier .env cr√©√©${NC}"
fi

# V√©rifier si REDIS_PASSWORD est d√©fini
REDIS_PASS=$(grep "^REDIS_PASSWORD=" .env | cut -d '=' -f2 || echo "")

if [ -z "$REDIS_PASS" ] || [ "$REDIS_PASS" == "changeme_redis_password_MUST_BE_CHANGED" ]; then
    echo ""
    echo -e "${RED}‚ùå REDIS_PASSWORD non d√©fini ou utilise la valeur par d√©faut${NC}"
    echo ""
    echo "Pour s√©curiser Redis, g√©n√©rez un mot de passe fort:"
    echo ""
    echo -e "${GREEN}# G√©n√©rer un mot de passe (Linux/Mac)${NC}"
    echo "openssl rand -base64 32"
    echo ""
    echo -e "${GREEN}# Ou utilisez cette commande compl√®te:${NC}"
    echo "echo \"REDIS_PASSWORD=\$(openssl rand -base64 32)\" >> .env"
    echo ""
    echo -e "${YELLOW}Voulez-vous g√©n√©rer un mot de passe automatiquement? (y/n)${NC}"
    read -r response
    
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        NEW_PASS=$(openssl rand -base64 32)
        
        # Retirer l'ancienne ligne si elle existe
        sed -i.bak '/^REDIS_PASSWORD=/d' .env
        
        # Ajouter la nouvelle
        echo "REDIS_PASSWORD=$NEW_PASS" >> .env
        
        echo -e "${GREEN}‚úÖ REDIS_PASSWORD g√©n√©r√© et ajout√© au fichier .env${NC}"
    else
        echo -e "${RED}D√©ploiement annul√©. Veuillez configurer REDIS_PASSWORD manuellement.${NC}"
        exit 1
    fi
fi

echo ""
echo "================================================"
echo "üìã √âtape 1/5 : Arr√™t des services"
echo "================================================"
docker-compose down
echo -e "${GREEN}‚úÖ Services arr√™t√©s${NC}"

echo ""
echo "================================================"
echo "üìã √âtape 2/5 : Nettoyage des donn√©es Redis"
echo "================================================"
echo -e "${YELLOW}‚ö†Ô∏è  Les donn√©es Redis seront supprim√©es pour appliquer la nouvelle config${NC}"
echo "Continuer? (y/n)"
read -r response

if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    docker volume rm back_redis_data 2>/dev/null || echo "Volume redis_data d√©j√† supprim√©"
    echo -e "${GREEN}‚úÖ Donn√©es Redis nettoy√©es${NC}"
else
    echo -e "${YELLOW}Conservation des donn√©es Redis (peut causer des probl√®mes)${NC}"
fi

echo ""
echo "================================================"
echo "üìã √âtape 3/5 : Rebuild des images Docker"
echo "================================================"
docker-compose build --no-cache
echo -e "${GREEN}‚úÖ Images reconstruites${NC}"

echo ""
echo "================================================"
echo "üìã √âtape 4/5 : D√©marrage des services"
echo "================================================"
docker-compose up -d
echo -e "${GREEN}‚úÖ Services d√©marr√©s${NC}"

# Attendre que Redis soit pr√™t
echo ""
echo "Attente du d√©marrage de Redis (10 secondes)..."
sleep 10

echo ""
echo "================================================"
echo "üìã √âtape 5/5 : V√©rifications de s√©curit√©"
echo "================================================"

# V√©rifier que Redis n'est pas expos√©
echo ""
echo "üîç V√©rification 1: Redis ne doit PAS √™tre expos√© sur le port 6379"
REDIS_EXPOSED=$(docker-compose port redis 6379 2>/dev/null || echo "")

if [ -z "$REDIS_EXPOSED" ]; then
    echo -e "${GREEN}‚úÖ Redis n'est PAS expos√© publiquement (CORRECT)${NC}"
else
    echo -e "${RED}‚ùå ERREUR: Redis est expos√© sur $REDIS_EXPOSED${NC}"
    echo "   V√©rifiez docker-compose.yml (section 'ports' doit √™tre comment√©e)"
fi

# Test connexion Redis avec mot de passe
echo ""
echo "üîç V√©rification 2: Authentification Redis"
REDIS_AUTH=$(docker-compose exec -T redis redis-cli -a "$REDIS_PASS" PING 2>/dev/null || echo "FAILED")

if [ "$REDIS_AUTH" == "PONG" ]; then
    echo -e "${GREEN}‚úÖ Redis r√©pond correctement avec authentification${NC}"
else
    echo -e "${RED}‚ùå ERREUR: Redis ne r√©pond pas correctement${NC}"
    echo "   V√©rifiez les logs: docker-compose logs redis"
fi

# Test connexion Celery
echo ""
echo "üîç V√©rification 3: Celery worker"
sleep 5  # Attendre que Celery d√©marre
CELERY_STATUS=$(docker-compose logs celery-worker 2>&1 | grep -i "ready\|connected" | tail -1 || echo "")

if [ ! -z "$CELERY_STATUS" ]; then
    echo -e "${GREEN}‚úÖ Celery worker semble fonctionner${NC}"
    echo "   $CELERY_STATUS"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Statut Celery incertain, v√©rifiez les logs${NC}"
fi

echo ""
echo "================================================"
echo "üìä Statut des conteneurs"
echo "================================================"
docker-compose ps

echo ""
echo "================================================"
echo "üéâ D√©ploiement termin√©!"
echo "================================================"
echo ""
echo "üìù Commandes utiles:"
echo ""
echo "  # Voir les logs en temps r√©el"
echo "  docker-compose logs -f"
echo ""
echo "  # Logs d'un service sp√©cifique"
echo "  docker-compose logs -f celery-worker"
echo "  docker-compose logs -f redis"
echo ""
echo "  # Statistiques ressources"
echo "  docker stats"
echo ""
echo "  # Test Redis manuel"
echo "  docker-compose exec redis redis-cli -a \"\$REDIS_PASSWORD\" PING"
echo ""
echo "  # Restart d'un service"
echo "  docker-compose restart celery-worker"
echo ""

# Afficher les derni√®res lignes des logs Redis pour d√©tecter les attaques
echo "================================================"
echo "üîç Derniers logs Redis (attaques d√©tect√©es?)"
echo "================================================"
docker-compose logs redis | grep -i "security\|attack" | tail -5 || echo "Aucune attaque d√©tect√©e r√©cemment"

echo ""
echo -e "${GREEN}‚úÖ D√©ploiement s√©curis√© termin√© avec succ√®s!${NC}"
echo ""
